#!/data/data/com.termux/files/usr/bin/bash -e
# Copyright ©2018 by Hax4Us. All rights reserved.  🌎 🌍 🌏 🌐 🗺
#
# https://hax4us.com
################################################################################

# colors

red='\033[1;31m'
yellow='\033[1;33m'
blue='\033[1;34m'
reset='\033[0m'

#  url's of all possibls architectures

urlaarch64="https://build.nethunter.com/kalifs/kalifs-20171013/kalifs-arm64-full.tar.xz"
urlarm="https://build.nethunter.com/kalifs/kalifs-20171013/kalifs-armhf-full.tar.xz"

printrerunerror="Sorry :( to say your downloaded linux file was corrupted or half downloaded but dont worry just rerun my script"

# utility function to initialize arch

getarch() {
	SETARCH=$1
}

# Utility function to check integrity

checkintegrity() {
	integritycheck=PASS
	echo
	printf "$blue [*] Checking integrity of file ..."
	echo
	echo " [*] Script will be terminate immediately in case of integrity failure"
	if [ $SETARCH = "aarch64" ]
		then
	sha512sum -c kalifs-arm64-minimal.sha512sum && echo || integritycheck=FAIL
	if [ $integritycheck = "FAIL" ] 
		then
			printf "$red $printrerunerror $reset"
			exit
		else
			extract
		fi
			elif [ $SETARCH = "armhf" ]
				then
		sha512sum -c kalifs-armhf-minimal.sha512sum && echo "" || integritycheck=FAIL
		if [ $integritycheck = "FAIL" ]
			then
				printf"$red $printrerunerror $reset"
				exit
			else
			extract
				fi

			fi
}

# Utility function to get tar file

gettarfile() {
	cd $HOME
	printf "$blue [*] Getting tar file ...$reset"
	echo
	if [ $SETARCH = "aarch64" ]
		then
			URL=$urlaarch64	
		echo
axel $URL
		getsha
			checkintegrity
	
elif [ $SETARCH = "armhf" ]
		then
			URL=$urlarm
		echo
axel $URL
			getsha
			checkintegrity
fi
}

# Utility function for Unknown Arch

unknownarch() {
	printf "$red"
	echo "[*] Unknown Architecture :("
	printf "$reset"
	exit
}

# Utility function for detect system

checksysinfo() {

	if [ $(getprop ro.product.cpu.abi) = "arm64-v8a" ]
		then
			checkdeps
			getarch aarch64
			gettarfile
		elif [ $(getprop ro.product.cpu.abi) = "armeabi" ]; then 
			checkdeps
			getarch armhf
			gettarfile
		elif [ $(getprop ro.product.cpu.abi) = "armeabi-v7a" ]; then
    		checkdeps
			getarch armhf
			gettarfile
		else
			unknownarch
		fi
	}

# Utility function for login file

createloginfile() {
bin=$PREFIX/bin/startkali
	cat > $bin <<- EOM
		#!/data/data/com.termux/files/usr/bin/bash -e
			unset LD_PRELOAD
				exec proot --link2symlink -0 -r $HOME/kali/ -b /dev/ -b /sys/ -b /proc/ -b /storage/ -b $HOME -w $HOME /usr/bin/env -i HOME=/root TERM="$TERM" LANG=$LANG PATH=/bin:/usr/bin:/sbin:/usr/sbin /bin/bash --login
				EOM
chmod 700 $bin

}

# Utility function for resolv.conf
resolvconf() {
#create resolv.conf file 
printf "\n nameserver 8.8.8.8\n nameserver 8.8.4.4" > $HOME/kali/etc/resolv.conf
}

# Utility function to extract tar file

extract() {
	printf "$blue [*] Extracting ... $reset"
	echo
	if [ $SETARCH = aarch64 ]; then
		OUTPUT=kalifs-arm64-minimal.tar.xz
		cd $HOME && proot --link2symlink -0 bsdtar -xpf $OUTPUT 2> /dev/null || : 
		mv kali-arm64 kali


	else
		OUTPUT=kalifs-armhf-minimal.tar.xz
               cd $HOME && proot --link2symlink -0 bsdtar -xpf $OUTPUT 2> /dev/null || :
	       mv kali-armhf kali
		fi
createloginfile
resolvconf
}

checkdeps() {
	printf "$blue \n"
	echo " [*] Updating termux ..."
	apt update -y &> /dev/null
	echo " [*] Checking all required tools ..."
	if [ -e $PREFIX/bin/proot ]
		then
			echo "  • Proot is OK"
		else
			apt install proot -y &> /dev/null
	if [ ! -e $PREFIX/bin/proot ]
		then
			printf "$red \n"
		echo " ERROR : check your internet connection or apt"
		printf "\n"
		echo " Exiting ..."
		printf "$reset"
		exit
		fi
	
			fi
	if [ -e $PREFIX/bin/bsdtar ]
		then
			echo "  • Bsdtar is Ok"
		else
			apt install bsdtar -y &> /dev/null
			if [ ! -e $PREFIX/bin/bsdtar ]
				then
					printf "$red"
		echo " ERROR : check your internet connection or apt"
		echo " [*] Exiting ..."
		printf "$reset"
		sleep 1
		exit
		fi
		fi
	if [ -e $PREFIX/bin/axel ]
		then
			echo "  • Axel is OK"
		else
			apt install axel -y &> /dev/null
			if [ ! -e $PREFIX/bin/axel ]
				then
	printf "$red"
	echo " ERROR : check your internet connection or apt "

  echo " Exiting ..."
  printf "$reset"
exit
				fi
				fi
}

# Utility function to get SHA

getsha() {
	echo
	printf "$blue [*] Getting SHA ... $reset"

	echo
	echo
	if [ $SETARCH = "aarch64" ]
		then
      axel https://build.nethunter.com/kalifs/kalifs-20171013/kalifs-arm64-minimal.sha512sum
	elif [ $SETARCH = "armhf" ]
		then
	 axel https://build.nethunter.com/kalifs/kalifs-20171013/kalifs-armhf-minimal.sha512sum
	else 
		printf "$red Your phone is supported but cant download SHA file plz contact to lokesh@hax4us.com $reset"
		exit
	fi

}

# Utility function to touchup (under construction)

#finalwork() {
#	if [ ! -e $HOME/finaltouchup.sh ] 
#		then
#	
#	curl -LO https://raw.githubusercontent.com/Hax4us/TermuxAlpine/master/finaltouchup.sh
#	. finaltouchup.sh
#else
#	. finaltouchup.sh
#	fi
#}

# Utility function for cleanup

#cleanup() {
#	if [ -d $DESTINATION ]
#		then
#	rm -rf $DESTINATION
#else
#	printf "$red not installed so not removed"
#	echo
#	fi
#	if [ -e $PREFIX/bin/startalpine ]
#		then
#	rm $PREFIX/bin/startalpine
#	printf "$yellow uninstalled :) $reset"
#	echo
#else
#	printf "$red not installed so not removed $reset"
#	echo
#	fi

#}

# Start
clear
#EXTRAARGS="default"
#if [[ ! -z $1 ]]
#	then
#EXTRAARGS=$1
#if [[ $EXTRAARGS = "uninstall" ]]
#	then
#		cleanup
#		exit
#		fi
#		fi
echo
printf "$yellow You are going to install Kali Nethunter in termux ;) Cool"
echo
echo
echo
printf "$blue [*] Checking host architecture ..."
checksysinfo
printf "$blue [*] Configuring Nethunter For You ..."
#cd $HOME && finalwork
printf "$blue"
echo
echo
echo " #-----------------------------------------------#"
echo
printf "$blue [∆] My Official Mail : $yellow lokesh@hax4us.com"
echo
printf "$blue [∆] My Website       : $yellow https://hax4us.com"
echo
printf "$blue [∆] My Channel       : $yellow https://youtube.com/hax4us $reset"
printf "$blue"
echo
echo " #-----------------------------------------------#"
printf "$reset"
